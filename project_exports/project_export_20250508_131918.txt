=== PROJECT METADATA ===
export_timestamp    : 2025-05-08T13:19:18.215624
source_folder       : I:\smriti-main-mobile\latest-smriti\latest-mobile-code\src
total_files         : 25
total_size          : 81038


=== FILE CONTENTS ===


=== FILE: App.js ===
• Path: I:\smriti-main-mobile\latest-smriti\latest-mobile-code\src\App.js
• Size: 889 bytes
• Created: 2025-05-06T16:53:42.127198
• Modified: 2025-05-06T17:29:36.188609

```
import React from "react";
import { Provider as PaperProvider } from "react-native-paper";
import { Provider as ReduxProvider } from "react-redux";
import { NavigationContainer } from "@react-navigation/native";
import { store } from "./store";
import AppNavigator from "./navigation/AppNavigator";
import { useTheme } from "./themes/ThemeContext";
import { I18nextProvider } from "react-i18next";
import i18n from "./i18n";

const AppWrapper = () => {
  return (
    <ReduxProvider store={store}>
      <I18nextProvider i18n={i18n}>
        <App />
      </I18nextProvider>
    </ReduxProvider>
  );
};

const App = () => {
  const { theme } = useTheme();

  return (
    <PaperProvider theme={theme}>
      <NavigationContainer theme={theme}>
        <AppNavigator />
      </NavigationContainer>
    </PaperProvider>
  );
};

export default AppWrapper;

```


=== FILE: config.js ===
• Path: I:\smriti-main-mobile\latest-smriti\latest-mobile-code\src\config.js
• Size: 83 bytes
• Created: 2025-05-06T16:53:42.226298
• Modified: 2025-05-06T16:53:42.226845

```
const API_BASE_URL = "http://192.168.0.103:5000";

export default API_BASE_URL;

```


=== FILE: components\ReminderCard.js ===
• Path: I:\smriti-main-mobile\latest-smriti\latest-mobile-code\src\components\ReminderCard.js
• Size: 916 bytes
• Created: 2025-05-08T00:25:27.316065
• Modified: 2025-05-08T00:25:27.316542

```
import React from 'react';
import { View, StyleSheet } from 'react-native';
import { Card, Title, Paragraph } from 'react-native-paper';
import { useTheme } from '../themes/ThemeContext';
import { useTranslation } from 'react-i18next';

const ReminderCard = ({ reminder }) => {
  const { theme } = useTheme();
  const { t } = useTranslation();

  const reminderTime = new Date(reminder.time).toLocaleTimeString();

  return (
    <Card style={[styles.card, { backgroundColor: theme.colors.surface }]}>
      <Card.Content>
        <Title style={{ color: theme.colors.text }}>{reminder.title}</Title>
        <Paragraph style={{ color: theme.colors.text }}>
          {t('time')}: {reminderTime}
        </Paragraph>
      </Card.Content>
    </Card>
  );
};

const styles = StyleSheet.create({
  card: {
    marginVertical: 8,
    elevation: 2,
  },
});

export default ReminderCard;

```


=== FILE: features\reminders\reminderSlice.js ===
• Path: I:\smriti-main-mobile\latest-smriti\latest-mobile-code\src\features\reminders\reminderSlice.js
• Size: 1879 bytes
• Created: 2025-05-08T00:25:27.316590
• Modified: 2025-05-08T00:25:27.316590

```
import { createSlice } from '@reduxjs/toolkit';
import { createReminder, fetchReminders } from '../../services/reminderService';

const initialState = {
  reminders: [],
  loading: false,
  error: null,
};

const reminderSlice = createSlice({
  name: 'reminders',
  initialState,
  reducers: {
    fetchRemindersStart(state) {
      state.loading = true;
      state.error = null;
    },
    fetchRemindersSuccess(state, action) {
      state.reminders = action.payload;
      state.loading = false;
      state.error = null;
    },
    fetchRemindersFailure(state, action) {
      state.loading = false;
      state.error = action.payload;
    },
    addReminderStart(state) {
      state.loading = true;
      state.error = null;
    },
    addReminderSuccess(state, action) {
      state.reminders.push(action.payload);
      state.loading = false;
      state.error = null;
    },
    addReminderFailure(state, action) {
      state.loading = false;
      state.error = action.payload;
    },
  },
});

export const {
  fetchRemindersStart,
  fetchRemindersSuccess,
  fetchRemindersFailure,
  addReminderStart,
  addReminderSuccess,
  addReminderFailure,
} = reminderSlice.actions;

export default reminderSlice.reducer;

// Thunk actions
export const fetchRemindersAsync = () => async (dispatch) => {
  try {
    dispatch(fetchRemindersStart());
    const reminders = await fetchReminders();
    dispatch(fetchRemindersSuccess(reminders));
  } catch (err) {
    dispatch(fetchRemindersFailure(err.message));
  }
};

export const addReminderAsync = (reminder) => async (dispatch) => {
  try {
    dispatch(addReminderStart());
    const newReminder = await createReminder(reminder);
    dispatch(addReminderSuccess(newReminder));
  } catch (err) {
    dispatch(addReminderFailure(err.message));
  }
};

```


=== FILE: hooks\useAppDispatch.js ===
• Path: I:\smriti-main-mobile\latest-smriti\latest-mobile-code\src\hooks\useAppDispatch.js
• Size: 98 bytes
• Created: 2025-05-08T00:25:27.317638
• Modified: 2025-05-08T00:25:27.317764

```
import { useDispatch } from 'react-redux';

export const useAppDispatch = () => useDispatch();

```


=== FILE: i18n\index.js ===
• Path: I:\smriti-main-mobile\latest-smriti\latest-mobile-code\src\i18n\index.js
• Size: 1283 bytes
• Created: 2025-05-06T18:51:43.726449
• Modified: 2025-05-06T18:51:43.726449

```
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';

const resources = {
  en: {
    translation: {
      home: 'Home',
      addReminder: 'Add Reminder',
      settings: 'Settings',
      reminderTitle: 'Reminder Title',
      selectTime: 'Select Time',
      addReminder: 'Add Reminder',
      darkMode: 'Dark Mode',
      language: 'Language',
      loading: 'Loading',
      noReminders: 'No reminders yet',
      time: 'Time',
    },
  },
  hi: {
    translation: {
      home: 'होम',
      addReminder: 'अनुस्मारक जोड़ें',
      settings: 'सेटिंग्स',
      reminderTitle: 'अनुस्मारक शीर्षक',
      selectTime: 'समय चुनें',
      addReminder: 'अनुस्मारक जोड़ें',
      darkMode: 'डार्क मोड',
      language: 'भाषा',
      loading: 'लोड हो रहा है',
      noReminders: 'अभी तक कोई अनुस्मारक नहीं',
      time: 'समय',
    },
  },
};

i18n.use(initReactI18next).init({
  resources,
  lng: 'en',
  fallbackLng: 'en',
  interpolation: {
    escapeValue: false,
  },
});

export default i18n;

```


=== FILE: navigation\AppNavigator.js ===
• Path: I:\smriti-main-mobile\latest-smriti\latest-mobile-code\src\navigation\AppNavigator.js
• Size: 4501 bytes
• Created: 2025-05-06T16:53:42.226927
• Modified: 2025-05-08T12:46:56.170326

```
import React from "react";
import { NavigationContainer } from "@react-navigation/native";
import { createBottomTabNavigator } from "@react-navigation/bottom-tabs";
import { createStackNavigator } from "@react-navigation/stack";
import { Ionicons } from "@expo/vector-icons";
import { useTranslation } from "react-i18next";
import { ThemeColors } from "../themes/ThemeContext";

// Screens for main app (tab navigator)
import HomeScreen from "../screens/HomeScreen";
import AddReminderScreen from "../screens/AddReminderScreen";
import SettingsScreen from "../screens/SettingsScreen";

// Screens for auth stack
import WelcomeScreen from "../screens/WelcomeScreen";
import UserTypeScreen from "../screens/UserTypeScreen";
import CaregiverLoginScreen from "../screens/CaregiverLoginScreen";
import CaregiverSignupScreen from "../screens/CaregivenSignupScreen";
import PatientHome from "../screens/PatientHome";
import SensorScreen from "../screens/SensorScreen";
import FriendsFamilyMemoriesScreen from "../screens/FriendsFamilyMemoriesScreen";
import PatientLoginScreen from "../screens/PatientLoginScreen";
import VoiceRecordingScreen from "../screens/VoiceRecordingScreen";
import ReminderScreen from "../screens/ReminderScreen";
import FamilyMemberScreen from "../screens/AddFmDeviceScreen";
import FamilyMembersPage from "../screens/FamilyMembersPage";

const Tab = createBottomTabNavigator();
const Stack = createStackNavigator();
const HomeStack = createStackNavigator();

const HomeStackNavigator = () => {
  return (
    <HomeStack.Navigator>
      <HomeStack.Screen name="Home" component={HomeScreen} />
    </HomeStack.Navigator>
  );
};

const AppTabNavigator = () => {
  const { t } = useTranslation();
  const theme = ThemeColors();

  return (
    <Tab.Navigator
      screenOptions={({ route }) => ({
        tabBarIcon: ({ focused, color, size }) => {
          let iconName;

          if (route.name === "Home") {
            iconName = focused ? "home" : "home-outline";
          } else if (route.name === "AddReminder") {
            iconName = focused ? "add-circle" : "add-circle-outline";
          } else if (route.name === "Settings") {
            iconName = focused ? "settings" : "settings-outline";
          }

          return <Ionicons name={iconName} size={size} color={color} />;
        },
        tabBarActiveTintColor: theme.colors.primary,
        tabBarInactiveTintColor: "gray",
        headerShown: false,
      })}
    >
      <Tab.Screen
        name="Home"
        component={HomeStackNavigator}
        options={{ title: t("home") }}
      />
      <Tab.Screen
        name="AddReminder"
        component={AddReminderScreen}
        options={{ title: t("addReminder") }}
      />
      <Tab.Screen
        name="Settings"
        component={SettingsScreen}
        options={{ title: t("settings") }}
      />
    </Tab.Navigator>
  );
};

const AppNavigator = () => {
  return (
    // <NavigationContainer>
      <Stack.Navigator screenOptions={{ headerShown: false }}>
        {/* Auth Screens */}
        <Stack.Screen name="Welcome" component={WelcomeScreen} />
        <Stack.Screen name="UserTypeScreen" component={UserTypeScreen} />
        <Stack.Screen
          name="CaregiverLoginScreen"
          component={CaregiverLoginScreen}
        />
        <Stack.Screen
          name="CaregiverSignupScreen"
          component={CaregiverSignupScreen}
        />
        <Stack.Screen
          name="PatientLoginScreen"
          component={PatientLoginScreen}
        />

        {/* Main App Screens */}
        <Stack.Screen name="MainApp" component={AppTabNavigator} />
        <Stack.Screen name="PatientHome" component={PatientHome} />
        <Stack.Screen name="ReminderScreen" component={ReminderScreen} />
        <Stack.Screen
          name="AddFamily&DeviceScreen"
          component={FamilyMemberScreen}
        />
        <Stack.Screen name="FamilyMembersPage" component={FamilyMembersPage} />
        <Stack.Screen name="SensorDataScreen" component={SensorScreen} />
        <Stack.Screen
          name="FriendsFamilyMemoriesScreen"
          component={FriendsFamilyMemoriesScreen}
        />
        <Stack.Screen
          name="VoiceRecordingScreen"
          component={VoiceRecordingScreen}
        />
      </Stack.Navigator>
    // </NavigationContainer>
  );
};

export default AppNavigator;

```


=== FILE: screens\AddFmDeviceScreen.js ===
• Path: I:\smriti-main-mobile\latest-smriti\latest-mobile-code\src\screens\AddFmDeviceScreen.js
• Size: 2574 bytes
• Created: 2025-05-06T16:53:42.226927
• Modified: 2025-05-06T16:53:42.227454

```
import React, { useState } from "react";
import { View, Text, TextInput, TouchableOpacity, StyleSheet, ScrollView } from "react-native";

const FamilyMemberScreen = () => {
  const [name, setName] = useState("");
  const [phone, setPhone] = useState("");
  const [address, setAddress] = useState("");

  const handleSave = () => {
    // Handle save logic here
    console.log({ name, phone, address });
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.header}>Add Family Member</Text>

      <View style={styles.formGroup}>
        <Text style={styles.label}>Full Name</Text>
        <TextInput
          style={styles.input}
          placeholder="John Doe"
          placeholderTextColor="#666"
          value={name}
          onChangeText={setName}
        />
      </View>

      <View style={styles.formGroup}>
        <Text style={styles.label}>Phone Number</Text>
        <TextInput
          style={styles.input}
          placeholder="+1 234 567 890"
          placeholderTextColor="#666"
          keyboardType="phone-pad"
          value={phone}
          onChangeText={setPhone}
        />
      </View>

      <View style={styles.formGroup}>
        <Text style={styles.label}>Address</Text>
        <TextInput
          style={[styles.input, { height: 80 }]}
          placeholder="Street, City, Country"
          placeholderTextColor="#666"
          multiline
          value={address}
          onChangeText={setAddress}
        />
      </View>

      <TouchableOpacity style={styles.saveButton} onPress={handleSave}>
        <Text style={styles.saveButtonText}>Save Family Member</Text>
      </TouchableOpacity>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#0D1B2A",
    padding: 20,
  },
  header: {
    fontSize: 28,
    color: "#fff",
    fontWeight: "600",
    marginBottom: 30,
    textAlign: "center",
  },
  formGroup: {
    marginBottom: 25,
  },
  label: {
    color: "#E0E1DD",
    fontSize: 16,
    marginBottom: 10,
    fontWeight: "500",
  },
  input: {
    backgroundColor: "#1B263B",
    borderRadius: 10,
    padding: 15,
    color: "#fff",
    fontSize: 16,
  },
  saveButton: {
    backgroundColor: "#415A77",
    padding: 20,
    borderRadius: 15,
    marginVertical: 30,
    alignItems: "center",
  },
  saveButtonText: {
    color: "#fff",
    fontWeight: "600",
    fontSize: 18,
  },
});

export default FamilyMemberScreen;
```


=== FILE: screens\AddReminderScreen.js ===
• Path: I:\smriti-main-mobile\latest-smriti\latest-mobile-code\src\screens\AddReminderScreen.js
• Size: 2531 bytes
• Created: 2025-05-06T18:51:43.726949
• Modified: 2025-05-06T18:51:43.726949

```
import React, { useState } from 'react';
import { View, StyleSheet } from 'react-native';
import { Button, TextInput } from 'react-native-paper';
import DateTimePickerModal from 'react-native-modal-datetime-picker';
import { useDispatch } from 'react-redux';
import { addReminderAsync } from '../features/reminders/reminderSlice';
import { useTheme } from '../themes/ThemeContext';
import { useTranslation } from 'react-i18next';

const AddReminderScreen = () => {
  const [title, setTitle] = useState('');
  const [date, setDate] = useState(new Date());
  const [isDatePickerVisible, setDatePickerVisibility] = useState(false);
  const dispatch = useDispatch();
  const { theme } = useTheme();
  const { t } = useTranslation();

  const showDatePicker = () => {
    setDatePickerVisibility(true);
  };

  const hideDatePicker = () => {
    setDatePickerVisibility(false);
  };

  const handleConfirm = (selectedDate) => {
    setDate(selectedDate);
    hideDatePicker();
  };

  const handleSubmit = () => {
    if (!title.trim()) return;

    dispatch(
      addReminderAsync({
        title,
        time: date.toISOString(),
      })
    );
    setTitle('');
    setDate(new Date());
  };

  return (
    <View style={[styles.container, { backgroundColor: theme.colors.background }]}>
      <TextInput
        label={t('reminderTitle')}
        value={title}
        onChangeText={setTitle}
        style={[styles.input, { backgroundColor: theme.colors.surface }]}
        theme={{ colors: { text: theme.colors.text } }}
      />
      <Button
        mode="outlined"
        onPress={showDatePicker}
        style={styles.button}
        labelStyle={{ color: theme.colors.primary }}
      >
        {t('selectTime')}: {date.toLocaleTimeString()}
      </Button>
      <DateTimePickerModal
        isVisible={isDatePickerVisible}
        mode="time"
        onConfirm={handleConfirm}
        onCancel={hideDatePicker}
      />
      <Button
        mode="contained"
        onPress={handleSubmit}
        style={[styles.button, { backgroundColor: theme.colors.primary }]}
        labelStyle={{ color: theme.colors.onPrimary }}
        disabled={!title.trim()}
      >
        {t('addReminder')}
      </Button>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
  },
  input: {
    marginBottom: 16,
  },
  button: {
    marginVertical: 8,
  },
});

export default AddReminderScreen;

```


=== FILE: screens\CaregivenSignupScreen.js ===
• Path: I:\smriti-main-mobile\latest-smriti\latest-mobile-code\src\screens\CaregivenSignupScreen.js
• Size: 7912 bytes
• Created: 2025-05-06T16:53:42.227591
• Modified: 2025-05-06T16:53:42.227591

```
import React, { useState } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  Linking,
  Image,
} from "react-native";
import { Ionicons, FontAwesome } from "@expo/vector-icons";
import API_BASE_URL from "../config";

const CaregiverSignupScreen = ({ navigation }) => {
  const [fullName, setFullName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [isFamilyMember, setIsFamilyMember] = useState(false);
  const [isNurse, setIsNurse] = useState(false);

  const handleSignup = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/auth/signup`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: fullName,
          email: email,
          password: password,
        }),
      });

      const data = await JSON.parse(response);
      console.log(response);
      if (response.ok) {
        console.log("Signup Successful:", data);
        alert("Signup successful!");
        navigation.navigate("CaregiverLoginScreen");
      } else {
        console.log("Signup Failed:", data);
        alert(data.message || "Signup failed, please try again.");
      }
    } catch (error) {
      console.error("Error during signup:", error);
      alert("Something went wrong, please try again later.");
    }
  };

  const openURL = (url) => {
    Linking.openURL(url).catch((err) =>
      console.error("Failed to open URL", err)
    );
  };

  return (
    <View style={styles.container}>
      <View style={styles.topSection}>
        <View style={styles.iconContainer}>
          <Image
            source={require("../../assets/login.jpg")}
            style={styles.image}
            resizeMode="cover"
          />
        </View>
      </View>

      <View style={styles.bottomSection}>
        <View style={styles.inputContainer}>
          <Text style={styles.label}>Full Name</Text>
          <TextInput
            style={styles.input}
            value={fullName}
            onChangeText={setFullName}
            placeholder="Enter full name"
          />
        </View>

        <View style={styles.inputContainer}>
          <Text style={styles.label}>Email Address</Text>
          <TextInput
            style={styles.input}
            value={email}
            onChangeText={setEmail}
            keyboardType="email-address"
            placeholder="Enter email"
          />
        </View>

        <View style={styles.inputContainer}>
          <Text style={styles.label}>Password</Text>
          <View style={styles.passwordContainer}>
            <TextInput
              style={styles.passwordInput}
              value={password}
              onChangeText={setPassword}
              secureTextEntry={!showPassword}
              placeholder="Enter password"
            />
            <TouchableOpacity onPress={() => setShowPassword(!showPassword)}>
              <Ionicons
                name={showPassword ? "eye-off" : "eye"}
                size={24}
                color="gray"
              />
            </TouchableOpacity>
          </View>
        </View>

        {/* <View style={styles.checkboxContainer}>
          <TouchableOpacity onPress={() => setIsFamilyMember(!isFamilyMember)} style={styles.checkboxRow}>
            <CheckBox value={isFamilyMember} onValueChange={setIsFamilyMember} />
            <Text style={styles.checkboxText}>Family Member</Text>
          </TouchableOpacity>
          <TouchableOpacity onPress={() => setIsNurse(!isNurse)} style={styles.checkboxRow}>
            <CheckBox value={isNurse} onValueChange={setIsNurse} />
            <Text style={styles.checkboxText}>Nurse</Text>
          </TouchableOpacity>
        </View> */}

        <TouchableOpacity style={styles.loginButton} onPress={handleSignup}>
          <Text style={styles.buttonText}>Sign Up</Text>
        </TouchableOpacity>

        <Text style={styles.orText}>Or</Text>

        <View style={styles.socialIcons}>
          <TouchableOpacity
            style={[styles.socialButton, { backgroundColor: "#DB4437" }]}
            onPress={() => openURL("https://accounts.google.com")}
          >
            <FontAwesome name="google" size={24} color="white" />
          </TouchableOpacity>
          <TouchableOpacity
            style={[styles.socialButton, { backgroundColor: "#1DA1F2" }]}
            onPress={() => openURL("https://twitter.com/login")}
          >
            <FontAwesome name="twitter" size={24} color="white" />
          </TouchableOpacity>
          <TouchableOpacity
            style={[styles.socialButton, { backgroundColor: "#1877F2" }]}
            onPress={() => openURL("https://www.facebook.com/login")}
          >
            <FontAwesome name="facebook" size={24} color="white" />
          </TouchableOpacity>
        </View>

        <TouchableOpacity
          style={styles.signupContainer}
          onPress={() => navigation.navigate("CaregiverLoginScreen")}
        >
          <Text style={styles.signupText}>Already have an account? </Text>
          <Text style={styles.signupLink}>Log in</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

export default CaregiverSignupScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
  },
  topSection: {
    backgroundColor: "#800080",
    height: "30%",
    alignItems: "center",
    justifyContent: "center",
  },
  iconContainer: {
    backgroundColor: "white",
    borderRadius: 50,
    width: 100,
    height: 100,
    justifyContent: "center",
    alignItems: "center",
    overflow: "hidden",
  },
  image: {
    width: "100%",
    height: "100%",
    borderRadius: 50,
  },
  bottomSection: {
    flex: 1,
    backgroundColor: "#fff",
    marginTop: -20,
    borderTopLeftRadius: 30,
    borderTopRightRadius: 30,
    padding: 20,
    alignItems: "center",
  },
  inputContainer: {
    width: "100%",
    marginBottom: 15,
  },
  label: {
    color: "#800080",
    fontWeight: "bold",
    marginBottom: 5,
  },
  input: {
    width: "100%",
    padding: 15,
    borderWidth: 1,
    borderColor: "#aaa",
    borderRadius: 10,
    backgroundColor: "#fff",
  },
  passwordContainer: {
    width: "100%",
    flexDirection: "row",
    alignItems: "center",
    borderWidth: 1,
    borderColor: "#aaa",
    borderRadius: 10,
    paddingHorizontal: 15,
    backgroundColor: "#fff",
  },
  passwordInput: {
    flex: 1,
    paddingVertical: 15,
  },
  forgotPassword: {
    alignSelf: "flex-end",
    marginBottom: 20,
  },
  forgotPasswordText: {
    color: "#800080",
    fontWeight: "bold",
  },
  loginButton: {
    backgroundColor: "#FFD750",
    padding: 15,
    borderRadius: 10,
    width: "100%",
    alignItems: "center",
    marginBottom: 20,
  },
  buttonText: {
    color: "black",
    fontSize: 18,
    fontWeight: "bold",
  },
  orText: {
    // marginVertical: 20,
    fontSize: 16,
    fontWeight: "bold",
    color: "#777",
    marginBottom: 25,
  },
  socialIcons: {
    flexDirection: "row",
    justifyContent: "space-around",
    width: "80%",
    marginBottom: 20,
  },
  socialButton: {
    width: 50,
    height: 50,
    borderRadius: 25,
    alignItems: "center",
    justifyContent: "center",
  },
  signupContainer: {
    flexDirection: "row",
    marginTop: 100,
  },
  signupText: {
    fontSize: 16,
    color: "#555",
  },
  signupLink: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#6A0DAD",
  },
});

```


=== FILE: screens\CaregiverLoginScreen.js ===
• Path: I:\smriti-main-mobile\latest-smriti\latest-mobile-code\src\screens\CaregiverLoginScreen.js
• Size: 7064 bytes
• Created: 2025-05-06T16:53:42.227591
• Modified: 2025-05-06T16:53:42.228230

```
import React, { useState } from "react";
import { 
  View, Text, TextInput, TouchableOpacity, StyleSheet, Linking, Image 
} from "react-native";
import { Ionicons, FontAwesome } from "@expo/vector-icons";
import API_BASE_URL from "../config";

const CaregiverLoginScreen = ({ navigation }) => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);

 const handleLogin = async () => {
  try {
    console.log(API_BASE_URL);
    const response = await fetch(`${API_BASE_URL}/api/auth/login`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        email: email,
        password: password,
      }),
    });

    navigation.navigate("HomeScreen"); // Navigate to home
    // const data = await response.json();

    // if (response.ok) {
    //   console.log("Login Successful:", data);
    //   alert("Login successful!");
    //   // Token ko local storage ya AsyncStorage me save kar sakti ho
    // } else {
    //   console.log("Login Failed:", data);
    //   alert(data.message || "Invalid credentials");
    // }
  } catch (error) {
    console.error("Error during login:", error);
    alert("Something went wrong, please try again later.");
  }
};

  const openURL = (url) => {
    Linking.openURL(url).catch((err) => console.error("Failed to open URL", err));
  };

  return (
    <View style={styles.container}>
      {/* Top Violet Section */}
      <View style={styles.topSection}>
        <View style={styles.iconContainer}>
          <Image 
            source={require("../../assets/login.jpg")} 
            style={styles.image} 
            resizeMode="cover"
          />
        </View>
      </View>

      {/* White Login Section */}
      <View style={styles.bottomSection}>
        {/* Email Input */}
        <View style={styles.inputContainer}>
          <Text style={styles.label}>Email Address</Text>
          <TextInput
            style={styles.input}
            value={email}
            onChangeText={setEmail}
            keyboardType="email-address"
          />
        </View>

        {/* Password Input */}
        <View style={styles.inputContainer}>
          <Text style={styles.label}>Password</Text>
          <View style={styles.passwordContainer}>
            <TextInput
              style={styles.passwordInput}
              value={password}
              onChangeText={setPassword}
              secureTextEntry={!showPassword}
            />
            <TouchableOpacity onPress={() => setShowPassword(!showPassword)}>
              <Ionicons name={showPassword ? "eye-off" : "eye"} size={24} color="gray" />
            </TouchableOpacity>
          </View>
        </View>

        {/* Forgot Password */}
        <TouchableOpacity style={styles.forgotPassword}>
          <Text style={styles.forgotPasswordText}>Forgot Password?</Text>
        </TouchableOpacity>

        {/* Login Button */}
        <TouchableOpacity style={styles.loginButton} onPress={handleLogin}>
          <Text style={styles.buttonText}>Login</Text>
        </TouchableOpacity>

        {/* OR Section */}
        <Text style={styles.orText}>Or</Text>

        {/* Social Login Options */}
        <View style={styles.socialIcons}>
          <TouchableOpacity 
            style={[styles.socialButton, { backgroundColor: "#DB4437" }]} 
            onPress={() => openURL("https://accounts.google.com")}
          >
            <FontAwesome name="google" size={24} color="white" />
          </TouchableOpacity>
          <TouchableOpacity 
            style={[styles.socialButton, { backgroundColor: "#1DA1F2" }]} 
            onPress={() => openURL("https://twitter.com/login")}
          >
            <FontAwesome name="twitter" size={24} color="white" />
          </TouchableOpacity>
          <TouchableOpacity 
            style={[styles.socialButton, { backgroundColor: "#1877F2" }]} 
            onPress={() => openURL("https://www.facebook.com/login")}
          >
            <FontAwesome name="facebook" size={24} color="white" />
          </TouchableOpacity>
        </View>

        {/* Signup Option */}
<TouchableOpacity 
  style={styles.signupContainer} 
  onPress={() => navigation.navigate("CaregiverSignupScreen")}
>
  <Text style={styles.signupText}>Don't have an account? </Text>
  <Text style={styles.signupLink}>Sign up</Text>
</TouchableOpacity>

      </View>
    </View>
  );
};

export default CaregiverLoginScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
  },
  topSection: {
    backgroundColor: "#800080",
    height: "30%",
    alignItems: "center",
    justifyContent: "center",
  },
  iconContainer: {
    backgroundColor: "white",
    borderRadius: 50,
    width: 100,
    height: 100,
    justifyContent: "center",
    alignItems: "center",
    overflow: "hidden",
  },
  image: {
    width: "100%",
    height: "100%",
    borderRadius: 50,
  },
  bottomSection: {
    flex: 1,
    backgroundColor: "#fff",
    marginTop: -20,
    borderTopLeftRadius: 30,
    borderTopRightRadius: 30,
    padding: 20,
    alignItems: "center",
  },
  inputContainer: {
    width: "100%",
    marginBottom: 15,
  },
  label: {
    color: "#800080",
    fontWeight: "bold",
    marginBottom: 5,
  },
  input: {
    width: "100%",
    padding: 15,
    borderWidth: 1,
    borderColor: "#aaa",
    borderRadius: 10,
    backgroundColor: "#fff",
  },
  passwordContainer: {
    width: "100%",
    flexDirection: "row",
    alignItems: "center",
    borderWidth: 1,
    borderColor: "#aaa",
    borderRadius: 10,
    paddingHorizontal: 15,
    backgroundColor: "#fff",
  },
  passwordInput: {
    flex: 1,
    paddingVertical: 15,
  },
  forgotPassword: {
    alignSelf: "flex-end",
    marginBottom: 20,
  },
  forgotPasswordText: {
    color: "#800080",
    fontWeight: "bold",
  },
  loginButton: {
    backgroundColor: "#FFD750",
    padding: 15,
    borderRadius: 10,
    width: "100%",
    alignItems: "center",
    marginBottom: 20
  },
  buttonText: {
    color: "black",
    fontSize: 18,
    fontWeight: "bold",
  },
  orText: {
    // marginVertical: 20,
    fontSize: 16,
    fontWeight: "bold",
    color: "#777",
    marginBottom: 25
  },
  socialIcons: {
    flexDirection: "row",
    justifyContent: "space-around",
    width: "80%",
    marginBottom: 20,
  },
  socialButton: {
    width: 50,
    height: 50,
    borderRadius: 25,
    alignItems: "center",
    justifyContent: "center",
  },
  signupContainer: {
    flexDirection: "row",
    marginTop: 100,
    
  },
  signupText: {
    fontSize: 16,
    color: "#555",
  },
  signupLink: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#6A0DAD",
  },
});

```


=== FILE: screens\FamilyMembersPage.js ===
• Path: I:\smriti-main-mobile\latest-smriti\latest-mobile-code\src\screens\FamilyMembersPage.js
• Size: 6517 bytes
• Created: 2025-05-06T16:53:42.228230
• Modified: 2025-05-06T16:53:42.228230

```
import React from "react";
import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Alert } from "react-native";

const FamilyMembersPage = () => {
  // Mock data with 4 family members
  const familyMembers = [
    {
      id: 1,
      name: "John Doe",
      relationship: "Father",
      deviceId: "DEV-789XYZ",
      caretaker: "Sarah Smith",
      lastActive: "2h ago",
      status: "connected"
    },
    {
      id: 2,
      name: "Jane Smith",
      relationship: "Mother",
      deviceId: "DEV-456ABC",
      caretaker: "Michael Johnson",
      lastActive: "5h ago",
      status: "disconnected"
    },
    {
      id: 3,
      name: "Emily Johnson",
      relationship: "Sister",
      deviceId: "DEV-123DEF",
      caretaker: "David Wilson",
      lastActive: "30m ago",
      status: "connected"
    },
    {
      id: 4,
      name: "Michael Brown",
      relationship: "Son",
      deviceId: "DEV-987ZYX",
      caretaker: "Laura Taylor",
      lastActive: "12h ago",
      status: "connected"
    }
  ];

  // Button handlers
  const handleEdit = (memberId) => {
    Alert.alert("Edit Member", "Edit functionality would go here");
  };

  const handleRemove = (memberId) => {
    Alert.alert(
      "Remove Member",
      "Are you sure you want to remove this family member?",
      [
        { text: "Cancel", style: "cancel" },
        { text: "Remove", onPress: () => console.log("Removing member:", memberId) }
      ]
    );
  };

  const handleAddMember = () => {
    Alert.alert("Add Member", "Add new member functionality would go here");
  };

  return (
    <View style={styles.container}>
      <Text style={styles.header}>Family Members Dashboard</Text>
      
      <ScrollView contentContainerStyle={styles.scrollContainer}>
        {familyMembers.map((member) => (
          <View key={member.id} style={styles.card}>
            <View style={styles.cardHeader}>
              <Text style={styles.memberName}>{member.name}</Text>
              <View style={[
                styles.statusIndicator,
                { backgroundColor: member.status === 'connected' ? '#4CAF50' : '#F44336' }
              ]} />
            </View>
            
            <View style={styles.detailRow}>
              <Text style={styles.detailLabel}>Relationship:</Text>
              <Text style={styles.detailValue}>{member.relationship}</Text>
            </View>
            
            <View style={styles.detailRow}>
              <Text style={styles.detailLabel}>Device ID:</Text>
              <Text style={styles.detailValue}>{member.deviceId}</Text>
            </View>
            
            <View style={styles.detailSection}>
              <Text style={styles.sectionTitle}>Caretaker Details</Text>
              <View style={styles.caretakerInfo}>
                <Text style={styles.caretakerName}>📞 {member.caretaker}</Text>
                <Text style={styles.lastActive}>Last active: {member.lastActive}</Text>
              </View>
            </View>
            
            <View style={styles.actionButtons}>
              <TouchableOpacity 
                style={styles.editButton}
                onPress={() => handleEdit(member.id)}
              >
                <Text style={styles.buttonText}>Edit Details</Text>
              </TouchableOpacity>
              
              <TouchableOpacity 
                style={styles.removeButton}
                onPress={() => handleRemove(member.id)}
              >
                <Text style={styles.buttonText}>Remove</Text>
              </TouchableOpacity>
            </View>
          </View>
        ))}
      </ScrollView>
      
      <TouchableOpacity 
        style={styles.addButton}
        onPress={handleAddMember}
      >
        <Text style={styles.addButtonText}>+ Add Family Member</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#0D1B2A",
    padding: 20,
  },
  header: {
    fontSize: 28,
    color: "#FFF",
    fontWeight: "600",
    marginBottom: 25,
    textAlign: "center",
  },
  scrollContainer: {
    paddingBottom: 80,
  },
  card: {
    backgroundColor: "#1B263B",
    borderRadius: 15,
    padding: 20,
    marginBottom: 15,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  cardHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 15,
  },
  memberName: {
    color: "#FFF",
    fontSize: 20,
    fontWeight: "500",
  },
  statusIndicator: {
    width: 12,
    height: 12,
    borderRadius: 6,
  },
  detailRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 10,
  },
  detailLabel: {
    color: "#E0E1DD",
    fontSize: 14,
    opacity: 0.8,
  },
  detailValue: {
    color: "#FFF",
    fontSize: 14,
    fontWeight: "500",
  },
  detailSection: {
    marginTop: 15,
    paddingTop: 15,
    borderTopWidth: 1,
    borderTopColor: "#415A77",
  },
  sectionTitle: {
    color: "#FFF",
    fontSize: 16,
    fontWeight: "600",
    marginBottom: 10,
  },
  caretakerInfo: {
    backgroundColor: "#2A3E5C",
    borderRadius: 10,
    padding: 15,
  },
  caretakerName: {
    color: "#FFF",
    fontSize: 14,
    marginBottom: 5,
  },
  lastActive: {
    color: "#888",
    fontSize: 12,
  },
  actionButtons: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginTop: 15,
  },
  editButton: {
    backgroundColor: "#415A77",
    paddingVertical: 8,
    paddingHorizontal: 20,
    borderRadius: 8,
  },
  removeButton: {
    backgroundColor: "#5C2A3E",
    paddingVertical: 8,
    paddingHorizontal: 20,
    borderRadius: 8,
  },
  buttonText: {
    color: "#FFF",
    fontSize: 14,
  },
  addButton: {
    position: "absolute",
    bottom: 30,
    alignSelf: "center",
    backgroundColor: "#415A77",
    paddingVertical: 15,
    paddingHorizontal: 30,
    borderRadius: 25,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 5,
  },
  addButtonText: {
    color: "#FFF",
    fontSize: 16,
    fontWeight: "500",
  },
});

export default FamilyMembersPage;
```


=== FILE: screens\FriendsFamilyMemoriesScreen.js ===
• Path: I:\smriti-main-mobile\latest-smriti\latest-mobile-code\src\screens\FriendsFamilyMemoriesScreen.js
• Size: 3550 bytes
• Created: 2025-05-06T16:53:42.228756
• Modified: 2025-05-06T16:53:42.228872

```
import React, { useState } from "react";
import { View, Text, Image, TouchableOpacity, StyleSheet } from "react-native";
import { Audio } from "expo-av";

const scrapbookPages = [
  { id: "1", image: require("../../assets/family.jpg"), note: "Our family picture!" },
  { id: "2", image: require("../../assets/beach.jpg"), note: "A day at the beach!" },
  { id: "3", image: require("../../assets/party.jpg"), note: "Mom's birthday celebration!" },
  { id: "4", image: require("../../assets/picnic.jpg"), note: "Picnic in the park." },
  { id: "5", image: require("../../assets/recipe.jpg"), note: "Grandma’s secret recipe!" },
  { id: "6", image: require("../../assets/wedding.jpg"), note: "Best friend's wedding day." },
];

const ScrapbookScreen = () => {
  const [currentPage, setCurrentPage] = useState(0);
  const [sound, setSound] = useState(null);

  const playVoiceNote = async () => {
    const { sound } = await Audio.Sound.createAsync(require("../../assets/audio.mp4"));
    setSound(sound);
    await sound.playAsync();
  };

  const nextPage = () => {
    if (currentPage < scrapbookPages.length - 1) {
      setCurrentPage(currentPage + 1);
    }
  };

  const prevPage = () => {
    if (currentPage > 0) {
      setCurrentPage(currentPage - 1);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.header}>Scrapbook Memories</Text>
      <View style={styles.scrapbookPage}>
        <Image source={scrapbookPages[currentPage].image} style={styles.image} />
        <Text style={styles.note}>{scrapbookPages[currentPage].note}</Text>
        <TouchableOpacity onPress={playVoiceNote} style={styles.voiceNoteButton}>
          <Text style={styles.voiceNoteText}>▶ Play Voice Note</Text>
        </TouchableOpacity>
      </View>
      <View style={styles.navigation}>
        <TouchableOpacity onPress={prevPage} disabled={currentPage === 0} style={[styles.navButton, currentPage === 0 && styles.disabledButton]}>
          <Text style={styles.navButtonText}>◀</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={nextPage} disabled={currentPage === scrapbookPages.length - 1} style={[styles.navButton, currentPage === scrapbookPages.length - 1 && styles.disabledButton]}>
          <Text style={styles.navButtonText}>▶</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: "#FAF3E0", alignItems: "center", justifyContent: "center", padding: 20 },
  header: { fontSize: 26, fontWeight: "bold", marginBottom: 20, color: "#4A4A4A" },
  scrapbookPage: { width: "90%", alignItems: "center", backgroundColor: "#FFF", padding: 20, borderRadius: 15, elevation: 5, shadowColor: "#000", shadowOpacity: 0.2, shadowRadius: 4 },
  image: { width: 280, height: 280, borderRadius: 15, marginBottom: 15 },
  note: { fontSize: 18, fontStyle: "italic", textAlign: "center", color: "#555" },
  voiceNoteButton: { marginTop: 15, padding: 12, backgroundColor: "#E76F51", borderRadius: 10, width: "80%", alignItems: "center" },
  voiceNoteText: { color: "#FFF", fontWeight: "bold", fontSize: 16 },
  navigation: { flexDirection: "row", marginTop: 20 },
  navButton: { marginHorizontal: 20, padding: 12, backgroundColor: "#2A9D8F", borderRadius: 10, width: 60, alignItems: "center" },
  disabledButton: { backgroundColor: "#A8A8A8" },
  navButtonText: { color: "#FFF", fontSize: 20, fontWeight: "bold" },
});

export default ScrapbookScreen;
```


=== FILE: screens\HomeScreen.js ===
• Path: I:\smriti-main-mobile\latest-smriti\latest-mobile-code\src\screens\HomeScreen.js
• Size: 4796 bytes
• Created: 2025-05-06T16:53:42.228872
• Modified: 2025-05-06T16:53:42.228872

```
import React from "react";
import { View, Text, StyleSheet, Image, Dimensions, TouchableOpacity } from "react-native";
import Ionicons from "react-native-vector-icons/Ionicons";

const { width, height } = Dimensions.get("window");

const HomeScreen = ({ navigation }) => {
  return (
    <View style={styles.container}>
      <Ionicons name="notifications-outline" size={28} color="white" style={styles.notificationIcon} />
      
      {/* Top Box */}
      <View style={styles.topBox}>
        <View style={styles.innerTopBox}>
          <Text style={styles.profileText}>My Profile</Text>
          <Image source={require("../../assets/old-man.jpg")} style={styles.profileImage} />
          <Text style={styles.nameText}>Somnath Singh</Text>
          <Text style={styles.detailsText}>54 yrs, Port Angeles</Text>
        </View>
      </View>

      {/* "How can we help you today?" Text */}
      <View style={styles.helloContainer}>
        <Text style={styles.helloText}>How can we help you today?</Text>
      </View>

      {/* Boxes Section */}
      <View style={styles.boxContainer}>
        {/* Row 1 */}
        <View style={styles.row}>
          <TouchableOpacity style={[styles.box, styles.box1]}
          onPress={() => navigation.navigate("FriendsFamilyMemoriesScreen")}
          >
            <Text style={styles.boxTitleWhite}>Friends & Family Memories</Text>
            <Text style={styles.boxDescWhite}>Relive and share moments.</Text>
          </TouchableOpacity>
          <TouchableOpacity style={[styles.box, styles.box2]}>
            <Text style={styles.boxTitleBlack}>Personalized Care Plan</Text>
            <Text style={styles.boxDescBlack}>Track health and treatment.</Text>
          </TouchableOpacity>
        </View>
        {/* Row 2 */}
        <View style={styles.row}>
          <TouchableOpacity style={[styles.box, styles.box3]} onPress={() => navigation.navigate("SensorDataScreen")}>
            <Text style={styles.boxTitleBlack}>Sensor Data</Text>
            <Text style={styles.boxDescBlack}>Monitor health metrics.</Text>
          </TouchableOpacity>
          <TouchableOpacity style={[styles.box, styles.box4]}>
            <Text style={styles.boxTitleBlack}>Mindfulness & Relaxation</Text>
            <Text style={styles.boxDescBlack}>Meditation and stress relief.</Text>
          </TouchableOpacity>
        </View>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#f0f8ff",
  },
  topBox: {
    width: "100%",
    height: height * 0.4,
    backgroundColor: "#36454F",
    borderBottomLeftRadius: 50,
    justifyContent: "center",
    alignItems: "center",
    transform: [{ skewY: "3deg" }],
    bottom: 20,
  },
  innerTopBox: {
    transform: [{ skewY: "-3deg" }],
    alignItems: "center",
  },
  notificationIcon: {
    position: "absolute",
    top: 60,
    right: 20,
  },
  profileText: {
    fontSize: 22,
    fontWeight: "bold",
    color: "#fff",
    marginTop: 30,
    marginBottom: 10,
  },
  profileImage: {
    width: 100,
    height: 100,
    borderRadius: 50,
    marginBottom: 10,
    borderWidth: 3,
    borderColor: "#fff",
  },
  nameText: {
    fontSize: 20,
    fontWeight: "bold",
    color: "#fff",
  },
  detailsText: {
    fontSize: 16,
    color: "#fff",
  },
  helloContainer: {
    marginTop: 20,
    marginLeft: 25,
  },
  helloText: {
    fontSize: 22,
    fontWeight: "bold",
    color: "#000",
  },
  boxContainer: {
    marginTop: 25,
    alignItems: "center",
  },
  row: {
    flexDirection: "row",
    justifyContent: "space-between",
    width: "90%",
    marginBottom: 20,
  },
  box: {
    width: width * 0.42,
    height: 180,
    justifyContent: "center",
    alignItems: "center",
    borderRadius: 20,
    paddingHorizontal: 10,
    paddingVertical: 15,
    elevation: 5,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 4,
  },
  box1: {
    backgroundColor: "#FF69B4",
  },
  box2: {
    backgroundColor: "#FAF9F6",
  },
  box3: {
    backgroundColor: "#FAF9F6",
  },
  box4: {
    backgroundColor: "#EEDC82",
  },
  boxTitleWhite: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#fff",
    textAlign: "center",
    marginBottom: 5,
  },
  boxDescWhite: {
    fontSize: 14,
    color: "#fff",
    textAlign: "center",
  },
  boxTitleBlack: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#000",
    textAlign: "center",
    marginBottom: 5,
  },
  boxDescBlack: {
    fontSize: 14,
    color: "#333",
    textAlign: "center",
  },
});

export default HomeScreen;

```


=== FILE: screens\PatientHome.js ===
• Path: I:\smriti-main-mobile\latest-smriti\latest-mobile-code\src\screens\PatientHome.js
• Size: 529 bytes
• Created: 2025-05-06T16:53:42.228872
• Modified: 2025-05-06T16:53:42.228872

```
import React from "react";
import { View, Text, StyleSheet } from "react-native";

const PatientHome = () => {
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Welcome, Patient</Text>
    </View>
  );
};

export default PatientHome;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#0D1B2A",
    alignItems: "center",
    justifyContent: "center",
  },
  title: {
    fontSize: 24,
    color: "white",
    fontWeight: "bold",
  },
});

```


=== FILE: screens\PatientLoginScreen.js ===
• Path: I:\smriti-main-mobile\latest-smriti\latest-mobile-code\src\screens\PatientLoginScreen.js
• Size: 7035 bytes
• Created: 2025-05-06T16:53:42.229506
• Modified: 2025-05-06T16:53:42.229506

```
import React, { useState } from "react";
import { 
  View, Text, TextInput, TouchableOpacity, StyleSheet, Linking, Image 
} from "react-native";
import { Ionicons, FontAwesome } from "@expo/vector-icons";
import API_BASE_URL from "../config";

const PatientLoginScreen = ({ navigation }) => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);

 const handleLogin = async () => {
  try {
    console.log(API_BASE_URL);
    const response = await fetch(`${API_BASE_URL}/api/auth/login`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        email: email,
        password: password,
      }),
    });

    const data = await response.json();

    if (response.ok) {
      console.log("Login Successful:", data);
      alert("Login successful!");
      // Token ko local storage ya AsyncStorage me save kar sakti ho
      navigation.navigate("HomeScreen"); // Navigate to home
    } else {
      console.log("Login Failed:", data);
      alert(data.message || "Invalid credentials");
    }
  } catch (error) {
    console.error("Error during login:", error);
    alert("Something went wrong, please try again later.");
  }
};

  const openURL = (url) => {
    Linking.openURL(url).catch((err) => console.error("Failed to open URL", err));
  };

  return (
    <View style={styles.container}>
      {/* Top Violet Section */}
      <View style={styles.topSection}>
        <View style={styles.iconContainer}>
          <Image 
            source={require("../../assets/login.jpg")} 
            style={styles.image} 
            resizeMode="cover"
          />
        </View>
      </View>

      {/* White Login Section */}
      <View style={styles.bottomSection}>
        {/* Email Input */}
        <View style={styles.inputContainer}>
          <Text style={styles.label}>Email Address</Text>
          <TextInput
            style={styles.input}
            value={email}
            onChangeText={setEmail}
            keyboardType="email-address"
          />
        </View>

        {/* Password Input */}
        <View style={styles.inputContainer}>
          <Text style={styles.label}>Password</Text>
          <View style={styles.passwordContainer}>
            <TextInput
              style={styles.passwordInput}
              value={password}
              onChangeText={setPassword}
              secureTextEntry={!showPassword}
            />
            <TouchableOpacity onPress={() => setShowPassword(!showPassword)}>
              <Ionicons name={showPassword ? "eye-off" : "eye"} size={24} color="gray" />
            </TouchableOpacity>
          </View>
        </View>

        {/* Forgot Password */}
        <TouchableOpacity style={styles.forgotPassword}>
          <Text style={styles.forgotPasswordText}>Forgot Password?</Text>
        </TouchableOpacity>

        {/* Login Button */}
        <TouchableOpacity style={styles.loginButton} onPress={handleLogin}>
          <Text style={styles.buttonText}>Login</Text>
        </TouchableOpacity>

        {/* OR Section */}
        <Text style={styles.orText}>Or</Text>

        {/* Social Login Options */}
        <View style={styles.socialIcons}>
          <TouchableOpacity 
            style={[styles.socialButton, { backgroundColor: "#DB4437" }]} 
            onPress={() => openURL("https://accounts.google.com")}
          >
            <FontAwesome name="google" size={24} color="white" />
          </TouchableOpacity>
          <TouchableOpacity 
            style={[styles.socialButton, { backgroundColor: "#1DA1F2" }]} 
            onPress={() => openURL("https://twitter.com/login")}
          >
            <FontAwesome name="twitter" size={24} color="white" />
          </TouchableOpacity>
          <TouchableOpacity 
            style={[styles.socialButton, { backgroundColor: "#1877F2" }]} 
            onPress={() => openURL("https://www.facebook.com/login")}
          >
            <FontAwesome name="facebook" size={24} color="white" />
          </TouchableOpacity>
        </View>

        {/* Signup Option */}
<TouchableOpacity 
  style={styles.signupContainer} 
  onPress={() => navigation.navigate("CaregiverSignupScreen")}
>
  <Text style={styles.signupText}>Don't have an account? </Text>
  <Text style={styles.signupLink}>Sign up</Text>
</TouchableOpacity>

      </View>
    </View>
  );
};

export default PatientLoginScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
  },
  topSection: {
    backgroundColor: "#800080",
    height: "30%",
    alignItems: "center",
    justifyContent: "center",
  },
  iconContainer: {
    backgroundColor: "white",
    borderRadius: 50,
    width: 100,
    height: 100,
    justifyContent: "center",
    alignItems: "center",
    overflow: "hidden",
  },
  image: {
    width: "100%",
    height: "100%",
    borderRadius: 50,
  },
  bottomSection: {
    flex: 1,
    backgroundColor: "#fff",
    marginTop: -20,
    borderTopLeftRadius: 30,
    borderTopRightRadius: 30,
    padding: 20,
    alignItems: "center",
  },
  inputContainer: {
    width: "100%",
    marginBottom: 15,
  },
  label: {
    color: "#800080",
    fontWeight: "bold",
    marginBottom: 5,
  },
  input: {
    width: "100%",
    padding: 15,
    borderWidth: 1,
    borderColor: "#aaa",
    borderRadius: 10,
    backgroundColor: "#fff",
  },
  passwordContainer: {
    width: "100%",
    flexDirection: "row",
    alignItems: "center",
    borderWidth: 1,
    borderColor: "#aaa",
    borderRadius: 10,
    paddingHorizontal: 15,
    backgroundColor: "#fff",
  },
  passwordInput: {
    flex: 1,
    paddingVertical: 15,
  },
  forgotPassword: {
    alignSelf: "flex-end",
    marginBottom: 20,
  },
  forgotPasswordText: {
    color: "#800080",
    fontWeight: "bold",
  },
  loginButton: {
    backgroundColor: "#FFD750",
    padding: 15,
    borderRadius: 10,
    width: "100%",
    alignItems: "center",
    marginBottom: 20
  },
  buttonText: {
    color: "black",
    fontSize: 18,
    fontWeight: "bold",
  },
  orText: {
    // marginVertical: 20,
    fontSize: 16,
    fontWeight: "bold",
    color: "#777",
    marginBottom: 25
  },
  socialIcons: {
    flexDirection: "row",
    justifyContent: "space-around",
    width: "80%",
    marginBottom: 20,
  },
  socialButton: {
    width: 50,
    height: 50,
    borderRadius: 25,
    alignItems: "center",
    justifyContent: "center",
  },
  signupContainer: {
    flexDirection: "row",
    marginTop: 100,
    
  },
  signupText: {
    fontSize: 16,
    color: "#555",
  },
  signupLink: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#6A0DAD",
  },
});

```


=== FILE: screens\ReminderScreen.js ===
• Path: I:\smriti-main-mobile\latest-smriti\latest-mobile-code\src\screens\ReminderScreen.js
• Size: 6565 bytes
• Created: 2025-05-06T16:53:42.229506
• Modified: 2025-05-06T16:53:42.229506

```
import React, { useState } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  Modal,
  ScrollView
} from "react-native";

const ReminderScreen = () => {
  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [reminderDate, setReminderDate] = useState(new Date());
  const [showDateModal, setShowDateModal] = useState(false);

  // Temporary fields to pick date/time manually
  const [tempDate, setTempDate] = useState(new Date());

  const handleSetReminder = () => {
    setReminderDate(tempDate);
    setShowDateModal(false);
  };

  const renderNumberPicker = (min, max, value, onChange) => {
    const items = [];
    for (let i = min; i <= max; i++) {
      items.push(
        <TouchableOpacity key={i} onPress={() => onChange(i)}>
          <Text style={[styles.pickerItem, value === i && styles.selectedItem]}>
            {i.toString().padStart(2, "0")}
          </Text>
        </TouchableOpacity>
      );
    }
    return <ScrollView>{items}</ScrollView>;
  };

  return (
    <View style={styles.container}>
      <Text style={styles.header}>Create Reminder</Text>

      <View style={styles.inputContainer}>
        <Text style={styles.label}>Reminder Title</Text>
        <TextInput
          style={styles.input}
          value={title}
          onChangeText={setTitle}
          placeholder="Enter title"
          placeholderTextColor="#A9A9A9"
        />
      </View>

      <View style={styles.inputContainer}>
        <Text style={styles.label}>Description</Text>
        <TextInput
          style={[styles.input, styles.multilineInput]}
          value={description}
          onChangeText={setDescription}
          placeholder="Enter description"
          placeholderTextColor="#A9A9A9"
          multiline
        />
      </View>

      <View style={styles.inputContainer}>
        <Text style={styles.label}>Date & Time</Text>
        <TouchableOpacity style={styles.dateButton} onPress={() => {
          setTempDate(new Date(reminderDate)); // clone
          setShowDateModal(true);
        }}>
          <Text style={styles.dateButtonText}>{reminderDate.toLocaleString()}</Text>
        </TouchableOpacity>
      </View>

      {/* MODAL for picking date and time */}
      <Modal visible={showDateModal} transparent={true} animationType="slide">
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Select Date & Time</Text>

            <View style={styles.pickerRow}>
              {renderNumberPicker(1, 31, tempDate.getDate(), (val) =>
                setTempDate((prev) => new Date(prev.setDate(val)))
              )}
              {renderNumberPicker(0, 11, tempDate.getMonth(), (val) =>
                setTempDate((prev) => new Date(prev.setMonth(val)))
              )}
              {renderNumberPicker(2024, 2030, tempDate.getFullYear(), (val) =>
                setTempDate((prev) => new Date(prev.setFullYear(val)))
              )}
            </View>

            <View style={styles.pickerRow}>
              {renderNumberPicker(0, 23, tempDate.getHours(), (val) =>
                setTempDate((prev) => new Date(prev.setHours(val)))
              )}
              {renderNumberPicker(0, 59, tempDate.getMinutes(), (val) =>
                setTempDate((prev) => new Date(prev.setMinutes(val)))
              )}
            </View>

            <View style={styles.modalButtons}>
              <TouchableOpacity onPress={() => setShowDateModal(false)} style={styles.cancelButton}>
                <Text style={styles.cancelText}>Cancel</Text>
              </TouchableOpacity>
              <TouchableOpacity onPress={handleSetReminder} style={styles.setButton}>
                <Text style={styles.setText}>Set</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

      <TouchableOpacity style={styles.createButton} onPress={() => console.log({ title, description, reminderDate })}>
        <Text style={styles.createButtonText}>Create Reminder</Text>
      </TouchableOpacity>
    </View>
  );
};

export default ReminderScreen;

// Styles
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#0D1B2A",
    padding: 20,
    justifyContent: "center",
  },
  header: {
    fontSize: 28,
    color: "white",
    fontWeight: "bold",
    alignSelf: "center",
    marginBottom: 30,
  },
  inputContainer: {
    marginBottom: 20,
  },
  label: {
    fontSize: 16,
    color: "white",
    marginBottom: 5,
  },
  input: {
    backgroundColor: "#1B263B",
    color: "white",
    paddingHorizontal: 15,
    paddingVertical: 10,
    borderRadius: 8,
    fontSize: 16,
  },
  multilineInput: {
    height: 80,
    textAlignVertical: "top",
  },
  dateButton: {
    backgroundColor: "#1B263B",
    padding: 15,
    borderRadius: 8,
    alignItems: "center",
  },
  dateButtonText: {
    color: "white",
    fontSize: 16,
  },
  createButton: {
    backgroundColor: "#415A77",
    padding: 15,
    borderRadius: 8,
    alignItems: "center",
    marginTop: 10,
  },
  createButtonText: {
    color: "white",
    fontSize: 18,
    fontWeight: "bold",
  },
  modalContainer: {
    flex: 1,
    backgroundColor: "#000000aa",
    justifyContent: "center",
  },
  modalContent: {
    backgroundColor: "#1B263B",
    margin: 30,
    borderRadius: 10,
    padding: 20,
  },
  modalTitle: {
    color: "white",
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 10,
    alignSelf: "center",
  },
  pickerRow: {
    flexDirection: "row",
    justifyContent: "space-around",
    height: 120,
    marginBottom: 10,
  },
  pickerItem: {
    color: "#ccc",
    fontSize: 18,
    textAlign: "center",
    paddingVertical: 5,
  },
  selectedItem: {
    color: "#fff",
    fontWeight: "bold",
    fontSize: 20,
  },
  modalButtons: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginTop: 20,
  },
  cancelButton: {
    padding: 10,
    backgroundColor: "#6c757d",
    borderRadius: 6,
  },
  setButton: {
    padding: 10,
    backgroundColor: "#4CAF50",
    borderRadius: 6,
  },
  cancelText: {
    color: "white",
    fontWeight: "bold",
  },
  setText: {
    color: "white",
    fontWeight: "bold",
  },
});

```


=== FILE: screens\SensorScreen.js ===
• Path: I:\smriti-main-mobile\latest-smriti\latest-mobile-code\src\screens\SensorScreen.js
• Size: 5479 bytes
• Created: 2025-05-06T16:53:42.229506
• Modified: 2025-05-06T16:53:42.230150

```
import React, { useState, useEffect } from "react";
import { View, Text, StyleSheet, TouchableOpacity, ScrollView, ActivityIndicator } from "react-native";
import { Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';

const API_BASE_URL = "https://mindapp-simulation.onrender.com";

const SensorScreen = () => {
  const [sensorData, setSensorData] = useState({
    heartRate: "--",
    spO2: "--",
    gyroscope: { x: "--", y: "--", z: "--" },
    accelerometer: { x: "--", y: "--", z: "--" },
    temperature: "--",
    bloodPressure: { systolic: "--", diastolic: "--" },
    steps: "--",
    respirationRate: "--",
    posture: "--",
  });

  const [isRefreshing, setIsRefreshing] = useState(false);

  const fetchData = async () => {
    try {
      const endpoints = {
        heartRate: "/health/heart",
        gyroscope: "/sensor/gyroscope",
        accelerometer: "/sensor/accelerometer",
        temperature: "/health/temperature",
        bloodPressure: "/health/blood_pressure",
        steps: "/activity/steps",
        respirationRate: "/health/respiration",
        posture: "/sensor/posture",
      };

      const fetchPromises = Object.entries(endpoints).map(async ([key, endpoint]) => {
        const response = await fetch(`${API_BASE_URL}${endpoint}`);
        const data = await response.json();
        return { key, data };
      });

      const results = await Promise.all(fetchPromises);

      setSensorData((prevData) =>
        results.reduce(
          (acc, item) => ({
            ...acc,
            [item.key]: item.data,
          }),
          prevData
        )
      );
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };

  const handleStartRefresh = () => {
    if (!isRefreshing) {
      setIsRefreshing(true);
      fetchData();
      const interval = setInterval(fetchData, 2000);
      setTimeout(() => {
        clearInterval(interval);
        setIsRefreshing(false);
      }, 20000);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>📊 Live Sensor Dashboard</Text>

      <TouchableOpacity 
        style={[styles.button, isRefreshing && styles.buttonDisabled]} 
        onPress={handleStartRefresh} 
        disabled={isRefreshing}
      >
        <Text style={styles.buttonText}>{isRefreshing ? "Refreshing..." : "Start Live Data"}</Text>
        {isRefreshing && <ActivityIndicator size="small" color="#FFF" style={styles.loader} />}
      </TouchableOpacity>

      <ScrollView style={styles.dataContainer} showsVerticalScrollIndicator={false}>
        <DataItem icon="heart-pulse" color="#FF6B6B" title="Heart Rate" value={`${sensorData.heartRate?.heart_rate || "--"} BPM`} />
        <DataItem icon="oxygen-tank" color="#60A5FA" title="SpO2" value={`${sensorData.heartRate?.sp_o2 || "--"}%`} />
        <DataItem icon="axis-arrow" color="#34D399" title="Gyroscope" value={`X: ${sensorData.gyroscope.x}, Y: ${sensorData.gyroscope.y}, Z: ${sensorData.gyroscope.z}`} />
        <DataItem icon="axis-arrow" color="#FBBF24" title="Accelerometer" value={`X: ${sensorData.accelerometer.x}, Y: ${sensorData.accelerometer.y}, Z: ${sensorData.accelerometer.z}`} />
        <DataItem icon="thermometer" color="#FB923C" title="Temperature" value={`${sensorData.temperature?.temperature || "--"}°C`} />
        <DataItem icon="blood-bag" color="#EF4444" title="Blood Pressure" value={`${sensorData.bloodPressure.systolic}/${sensorData.bloodPressure.diastolic} mmHg`} />
        <DataItem icon="lungs" color="#10B981" title="Respiration Rate" value={`${sensorData.respirationRate?.respiration_rate || "--"} breaths/min`} />
      </ScrollView>
    </View>
  );
};

// Enhanced Card Component
const DataItem = ({ title, value, icon, color }) => (
  <View style={[styles.dataCard, { borderLeftColor: color }]}>
    <View style={styles.dataHeader}>
      <MaterialCommunityIcons name={icon} size={28} color={color} />
      <Text style={styles.dataTitle}>{title}</Text>
    </View>
    <Text style={[styles.dataText, { color }]}>{value}</Text>
  </View>
);

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#F8FAFC",
    padding: 20,
  },
  title: {
    fontSize: 28,
    fontWeight: "bold",
    color: "#1E3A8A",
    textAlign: "center",
    marginVertical: 20,
  },
  button: {
    backgroundColor: "#1E3A8A",
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    paddingVertical: 14,
    borderRadius: 12,
    marginBottom: 20,
  },
  buttonDisabled: {
    backgroundColor: "#A5B4FC",
  },
  buttonText: {
    color: "#FFF",
    fontSize: 18,
    fontWeight: "bold",
  },
  loader: {
    marginLeft: 10,
  },
  dataContainer: {
    flexGrow: 1,
  },
  dataCard: {
    backgroundColor: "#FFF",
    padding: 16,
    borderRadius: 12,
    marginBottom: 12,
    flexDirection: "column",
    borderLeftWidth: 6,
    shadowColor: "#000",
    shadowOpacity: 0.05,
    shadowRadius: 8,
    elevation: 4,
  },
  dataHeader: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 8,
  },
  dataTitle: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#374151",
    marginLeft: 8,
  },
  dataText: {
    fontSize: 22,
    fontWeight: "bold",
    marginTop: 5,
  },
});

export default SensorScreen;

```


=== FILE: screens\SettingsScreen.js ===
• Path: I:\smriti-main-mobile\latest-smriti\latest-mobile-code\src\screens\SettingsScreen.js
• Size: 1423 bytes
• Created: 2025-05-06T18:51:43.726949
• Modified: 2025-05-06T18:51:43.730947

```
import React from 'react';
import { View, StyleSheet, Switch } from 'react-native';
import { List, Text } from 'react-native-paper';
import { useTheme } from '../themes/ThemeContext';
import { useTranslation } from 'react-i18next';

const SettingsScreen = () => {
  const { theme, toggleTheme } = useTheme();
  const { t, i18n } = useTranslation();

  const toggleLanguage = () => {
    const newLang = i18n.language === 'en' ? 'hi' : 'en';
    i18n.changeLanguage(newLang);
  };

  return (
    <View style={[styles.container, { backgroundColor: theme.colors.background }]}>
      <List.Section>
        <List.Item
          title={t('darkMode')}
          right={() => (
            <Switch
              value={theme.dark}
              onValueChange={toggleTheme}
              thumbColor={theme.colors.primary}
            />
          )}
        />
        <List.Item
          title={t('language')}
          description={i18n.language === 'en' ? 'English' : 'हिंदी'}
          right={() => (
            <Switch
              value={i18n.language === 'hi'}
              onValueChange={toggleLanguage}
              thumbColor={theme.colors.primary}
            />
          )}
        />
      </List.Section>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
  },
});

export default SettingsScreen;

```


=== FILE: screens\UserTypeScreen.js ===
• Path: I:\smriti-main-mobile\latest-smriti\latest-mobile-code\src\screens\UserTypeScreen.js
• Size: 4460 bytes
• Created: 2025-05-06T16:53:42.230150
• Modified: 2025-05-08T13:00:19.860622

```
import React, { useState } from "react";
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Dimensions,
} from "react-native";
import { FontAwesome5 } from "@expo/vector-icons";
import { useNavigation } from "@react-navigation/native";

const UserSelectionScreen = () => {
  const [selectedRole, setSelectedRole] = useState(null);
  const navigation = useNavigation();

  const handleNext = () => {
    if (selectedRole === "patient") {
      navigation.navigate("CaregiverLoginScreen");
    } else if (selectedRole === "caregiver") {
      navigation.navigate("VoiceRecordingScreen");
    } else if (selectedRole === "family") {
      navigation.navigate("FamilyMembersPage"); // Or whatever screen you want for family members
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>I am a</Text>

      <View style={styles.triangleContainer}>
        {/* Top Center - Patient */}
        <TouchableOpacity
          style={[
            styles.circle,
            styles.topCircle,
            selectedRole === "patient" && styles.selectedCircle,
          ]}
          onPress={() => setSelectedRole("patient")}
        >
          <FontAwesome5 name="user-injured" size={40} color="#4CAF50" />
          <Text style={styles.label}>Patient</Text>
        </TouchableOpacity>

        {/* Bottom Left - Caregiver */}
        <TouchableOpacity
          style={[
            styles.circle,
            styles.bottomLeftCircle,
            selectedRole === "caregiver" && styles.selectedCircle,
          ]}
          onPress={() => setSelectedRole("caregiver")}
        >
          <FontAwesome5 name="user-nurse" size={40} color="#ff6b6b" />
          <Text style={styles.label}>Caregiver</Text>
        </TouchableOpacity>

        {/* Bottom Right - Family Member */}
        <TouchableOpacity
          style={[
            styles.circle,
            styles.bottomRightCircle,
            selectedRole === "family" && styles.selectedCircle,
          ]}
          onPress={() => setSelectedRole("family")}
        >
          <FontAwesome5 name="users" size={40} color="#2196F3" />
          <Text style={styles.label}>Family</Text>
        </TouchableOpacity>
      </View>

      {/* Next Button */}
      <TouchableOpacity
        style={[styles.nextButton, !selectedRole && styles.disabledButton]}
        onPress={handleNext}
        disabled={!selectedRole}
      >
        <Text style={styles.buttonText}>Next</Text>
      </TouchableOpacity>
    </View>
  );
};

export default UserSelectionScreen;

const { width } = Dimensions.get("window");
const circleSize = width * 0.3; // 30% of screen width

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#FFFFFF",
    alignItems: "center",
    justifyContent: "center",
  },
  title: {
    fontSize: 28,
    fontWeight: "bold",
    color: "#333",
    marginBottom: 40,
  },
  triangleContainer: {
    width: width * 0.8,
    height: width * 0.8,
    position: "relative",
    marginBottom: 40,
  },
  circle: {
    width: circleSize,
    height: circleSize,
    borderRadius: circleSize / 2,
    backgroundColor: "#FFD9D9",
    justifyContent: "center",
    alignItems: "center",
    borderWidth: 3,
    borderColor: "transparent",
    shadowColor: "transparent",
    position: "absolute",
  },
  topCircle: {
    top: 0,
    left: (width * 0.8 - circleSize) / 2,
    backgroundColor: "#E8F5E9", // Light green for patient
  },
  bottomLeftCircle: {
    bottom: 40,
    left: 10,
    backgroundColor: "#FFEBEE", // Light red for caregiver
  },
  bottomRightCircle: {
    bottom: 40,
    right: 10,
    backgroundColor: "#E3F2FD", // Light blue for family
  },
  selectedCircle: {
    borderColor: "#800080",
    shadowColor: "#800080",
    shadowOffset: { width: 0, height: 5 },
    shadowOpacity: 0.4,
    shadowRadius: 10,
    elevation: 10,
  },
  label: {
    marginTop: 10,
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
  },
  nextButton: {
    backgroundColor: "#800080",
    paddingVertical: 12,
    paddingHorizontal: 100,
    borderRadius: 25,
    position: "absolute",
    bottom: 40,
  },
  disabledButton: {
    backgroundColor: "#ccc",
  },
  buttonText: {
    fontSize: 18,
    color: "white",
    fontWeight: "bold",
  },
});

```


=== FILE: screens\VoiceRecordingScreen.js ===
• Path: I:\smriti-main-mobile\latest-smriti\latest-mobile-code\src\screens\VoiceRecordingScreen.js
• Size: 5836 bytes
• Created: 2025-05-06T16:53:42.230150
• Modified: 2025-05-06T16:53:42.230150

```
import React from 'react';
import { StyleSheet, Text, View, TouchableOpacity, FlatList } from 'react-native';
import { Audio } from 'expo-av';
import * as DocumentPicker from 'expo-document-picker';

export default function VoiceRecordingScreen() {
  const [recording, setRecording] = React.useState();
  const [recordings, setRecordings] = React.useState([]);
  const [selectedRecording, setSelectedRecording] = React.useState(null);

  async function startRecording() {
    try {
      const perm = await Audio.requestPermissionsAsync();
      if (perm.status === "granted") {
        await Audio.setAudioModeAsync({
          allowsRecordingIOS: true, //bg voice remover and khalli nhii jani chahiye voice 
          playsInSilentModeIOS: true,
        });
        const { recording } = await Audio.Recording.createAsync(Audio.RECORDING_OPTIONS_PRESET_HIGH_QUALITY);
        setRecording(recording);
      }
    } catch (err) {
      console.log("Error starting recording: ", err);
    }
  }

  async function stopRecording() {
    setRecording(undefined);

    await recording.stopAndUnloadAsync();
    let allRecordings = [...recordings];
    const { sound, status } = await recording.createNewLoadedSoundAsync();
    allRecordings.push({
      sound: sound,
      duration: getDurationFormatted(status.durationMillis),
      file: recording.getURI(),
    });

    setRecordings(allRecordings);
  }

  function getDurationFormatted(milliseconds) {
    const minutes = milliseconds / 1000 / 60;
    const seconds = Math.round((minutes - Math.floor(minutes)) * 60);
    return seconds < 10 
      ? `${Math.floor(minutes)}:0${seconds}` 
      : `${Math.floor(minutes)}:${seconds}`;
  }

  async function selectAudioFile() {
    try {
      const result = await DocumentPicker.getDocumentAsync({
        type: 'audio/*',
      });
      if (result.type === 'success') {
        const { uri, name } = result;
        const { sound, status } = await Audio.Sound.createAsync(
          { uri },
          { shouldPlay: false }
        );
        setRecordings([
          ...recordings,
          { sound: sound, duration: getDurationFormatted(status.durationMillis), file: uri },
        ]);
      }
    } catch (err) {
      console.log("Error selecting audio file: ", err);
    }
  }

  function deleteRecording(index) {
    const newRecordings = [...recordings];
    newRecordings.splice(index, 1); // Remove the recording at the given index
    setRecordings(newRecordings);
  }

  function deleteAllRecordings() {
    setRecordings([]);
  }

  function renderItem({ item, index }) {
    return (
      <View style={styles.recordingItem}>
        <Text style={styles.recordingText}>
          Recording #{index + 1} | {item.duration}
        </Text>
        <View style={styles.buttons}>
          <TouchableOpacity 
            style={[styles.button, styles.playButton]} 
            onPress={() => item.sound.replayAsync()}>
            <Text style={styles.buttonText}>Play</Text>
          </TouchableOpacity>
          <TouchableOpacity 
            style={[styles.button, styles.deleteButton]} 
            onPress={() => deleteRecording(index)}>
            <Text style={styles.buttonText}>Delete</Text>
          </TouchableOpacity>
        </View>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Voice Recording App</Text>
      <TouchableOpacity 
        style={[styles.button, styles.recordButton]} 
        onPress={recording ? stopRecording : startRecording}>
        <Text style={styles.buttonText}>{recording ? 'Stop Recording' : 'Start Recording'}</Text>
      </TouchableOpacity>

      <FlatList
        data={recordings}
        renderItem={renderItem}
        keyExtractor={(item, index) => index.toString()}
        style={styles.recordingsList}
      />

      <TouchableOpacity 
        style={[styles.button, styles.clearButton]} 
        onPress={deleteAllRecordings}
        disabled={recordings.length === 0}>
        <Text style={styles.buttonText}>Delete All</Text>
      </TouchableOpacity>

      <TouchableOpacity 
        style={[styles.button, styles.selectButton]} 
        onPress={selectAudioFile}>
        <Text style={styles.buttonText}>Select Audio File</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f9f9f9',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 50,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    color: '#333',
  },
  button: {
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 5,
    marginHorizontal: 5,
    marginTop: 10,
  },
  playButton: {
    backgroundColor: '#4CAF50',
  },
  selectButton: {
    backgroundColor: '#2196F3',
  },
  clearButton: {
    backgroundColor: '#f44336',
    marginTop: 20,
  },
  recordButton: {
    backgroundColor: '#FF9800',
    marginBottom: 20,
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    textAlign: 'center',
  },
  recordingsList: {
    width: '100%',
    marginTop: 20,
  },
  recordingItem: {
    backgroundColor: '#fff',
    padding: 15,
    marginBottom: 10,
    borderRadius: 5,
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowRadius: 5,
    elevation: 2,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  recordingText: {
    fontSize: 16,
    color: '#555',
    flex: 1,
  },
  buttons: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  deleteButton: {
    backgroundColor: '#f44336',
    marginLeft: 10,
  },
});

```


=== FILE: screens\WelcomeScreen.js ===
• Path: I:\smriti-main-mobile\latest-smriti\latest-mobile-code\src\screens\WelcomeScreen.js
• Size: 2416 bytes
• Created: 2025-05-06T16:53:42.230769
• Modified: 2025-05-06T16:53:42.230769

```
import React, { useEffect, useRef } from "react";
import { View, Text, Image, TouchableOpacity, StyleSheet, Animated } from "react-native";

const WelcomeScreen = ({ navigation }) => {
  const bounceAnim = useRef(new Animated.Value(0)).current;

  useEffect(() => {
    Animated.loop(
      Animated.sequence([
        Animated.timing(bounceAnim, {
          toValue: -10, // Move up by 10 pixels
          duration: 1000,
          useNativeDriver: true,
        }),
        Animated.timing(bounceAnim, {
          toValue: 0, // Move back to original position
          duration: 1000,
          useNativeDriver: true,
        }),
      ])
    ).start();
  }, []);

  return (
    <View style={styles.container}>
      {/* Brain Logo with Animation */}
      <Animated.Image
        source={require("../../assets/brain.png")}
        style={[styles.logo, { transform: [{ translateY: bounceAnim }] }]}
      />

      {/* App Name */}
      <Text style={styles.title}>Mind Easy</Text>

      {/* Alzheimer Patient Image */}
      <Image source={require("../../assets/calm.png")} style={styles.patientImage} />

      {/* Get Started Button */}
      <TouchableOpacity style={styles.button} onPress={() => navigation.navigate("UserTypeScreen")}>
  <Text style={styles.buttonText}>Get Started</Text>
</TouchableOpacity>


      {/* Alzheimer Quote */}
      <Text style={styles.quote}>"Memories may fade, but love remains forever."</Text>
    </View>
  );
};

export default WelcomeScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#0D1B2A", // Dark Blue
    alignItems: "center",
    justifyContent: "center",
    padding: 20,
  },
  logo: {
    width: 100,
    height: 100,
  },
  title: {
    fontSize: 32,
    fontWeight: "bold",
    color: "white",
    fontFamily: "Times New Roman",
    fontStyle: "italic",
    marginBottom: 50,
  },
  patientImage: {
    width: 320,
    height: 280,
    borderRadius: 20,
    marginBottom: 80,
  },
  button: {
    backgroundColor: "#1E90FF",
    paddingVertical: 12,
    paddingHorizontal: 80,
    borderRadius: 25,
    marginBottom: 20,
  },
  buttonText: {
    fontSize: 18,
    color: "white",
    fontWeight: "bold",
  },
  quote: {
    fontSize: 14,
    color: "white",
    fontStyle: "italic",
    textAlign: "center",
  },
});

```


=== FILE: services\reminderService.js ===
• Path: I:\smriti-main-mobile\latest-smriti\latest-mobile-code\src\services\reminderService.js
• Size: 1118 bytes
• Created: 2025-05-08T00:25:27.318281
• Modified: 2025-05-08T00:25:27.318281

```
import axios from 'axios';

const API_BASE_URL = 'https://myapi.com/api/reminders';

const api = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000,
});

api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response) {
      console.error('API Error:', error.response.status, error.response.data);
      return Promise.reject(error.response.data);
    } else if (error.request) {
      console.error('API Error: No response received');
      return Promise.reject(new Error('No response received from server'));
    } else {
      console.error('API Error:', error.message);
      return Promise.reject(error);
    }
  }
);

export const fetchReminders = async () => {
  try {
    const response = await api.get('/');
    return response.data;
  } catch (error) {
    throw new Error('Failed to fetch reminders');
  }
};

export const createReminder = async (reminder) => {
  try {
    const response = await api.post('/', reminder);
    return response.data;
  } catch (error) {
    throw new Error('Failed to create reminder');
  }
};

```


=== FILE: store\index.js ===
• Path: I:\smriti-main-mobile\latest-smriti\latest-mobile-code\src\store\index.js
• Size: 219 bytes
• Created: 2025-05-06T17:14:15.637588
• Modified: 2025-05-08T00:25:27.318281

```
import { configureStore } from '@reduxjs/toolkit';
import reminderReducer from '../features/reminders/reminderSlice';

export const store = configureStore({
  reducer: {
    reminders: reminderReducer,
  },
});

```


=== FILE: themes\ThemeContext.js ===
• Path: I:\smriti-main-mobile\latest-smriti\latest-mobile-code\src\themes\ThemeContext.js
• Size: 1365 bytes
• Created: 2025-05-06T18:51:43.731948
• Modified: 2025-05-06T18:51:43.731948

```
import React, { createContext, useContext, useState } from 'react';
import { DefaultTheme, DarkTheme } from '@react-navigation/native';
import { MD3LightTheme, MD3DarkTheme, adaptNavigationTheme } from 'react-native-paper';

const { LightTheme, DarkTheme: NavigationDarkTheme } = adaptNavigationTheme({
  reactNavigationLight: DefaultTheme,
  reactNavigationDark: DarkTheme,
});

const CombinedLightTheme = {
  ...MD3LightTheme,
  ...LightTheme,
  colors: {
    ...MD3LightTheme.colors,
    ...LightTheme.colors,
  },
};

const CombinedDarkTheme = {
  ...MD3DarkTheme,
  ...NavigationDarkTheme,
  colors: {
    ...MD3DarkTheme.colors,
    ...NavigationDarkTheme.colors,
  },
};

const ThemeContext = createContext({
  theme: { ...CombinedLightTheme, dark: false },
  toggleTheme: () => {},
});

export const ThemeProvider = ({ children }) => {
  const [isDark, setIsDark] = useState(false);

  const toggleTheme = () => {
    setIsDark(!isDark);
  };

  const theme = isDark ? { ...CombinedDarkTheme, dark: true } : { ...CombinedLightTheme, dark: false };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>{children}</ThemeContext.Provider>
  );
};

export const useTheme = () => useContext(ThemeContext);

export const ThemeColors = () => {
  const { theme } = useTheme();
  return theme;
};

```